buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.github.ksoichiro:gradle-build-info-plugin:0.2.0'
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.github.ksoichiro.build.info'
apply plugin: 'jacoco'

jar {
    baseName = 'crawler'
    version = '1.0-SNAPSHOT'
}

sourceCompatibility = 1.8

dependencies {
    compile project(path: ':shared')
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-configuration-processor')
    compile('org.twitter4j:twitter4j-core:4.0.6')
    compile('org.jsoup:jsoup:1.10.1')
    compile('org.apache.httpcomponents:httpclient')
    compile('joda-time:joda-time')

    runtime('org.springframework.boot:spring-boot-devtools')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('cz.jirutka.spring:embedmongo-spring:1.3.1')
    testCompile 'org.mockito:mockito-core:1.10.19'
}

compileJava.dependsOn(processResources)

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

idea {
    module {
        iml {
            withXml {
                // Get root of module as groovy.util.Node.
                def moduleRoot = it.asNode()

                // Find if component with name 'FacetManager'
                // is already set.
                def facetManager = moduleRoot.component.find { component -> component.'@name' == 'FacetManager' }
                if (!facetManager) {
                    // Create new component with name 'FacetManager'
                    facetManager = moduleRoot.appendNode('component', [name: 'FacetManager'])
                }

                // Find Spring facet it might already be there.
                def springFacet = facetManager.facet.find { facet -> facet.'@type' == 'Spring' && facet.'@name' == 'Spring' }
                if (!springFacet) {
                    // If not set create new facet node with name 'Spring'
                    // and type 'Spring' and apply a default configuration.
                    springFacet = facetManager.appendNode('facet', [type: 'Spring', name: 'Spring'])
                    springFacet.appendNode('configuration')
                }
            }
        }
    }
}
