buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.github.ksoichiro:gradle-build-info-plugin:0.2.0'
    }
}

plugins {
    id "com.moowork.node" version "1.1.1"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.github.ksoichiro.build.info'
//apply plugin: 'com.moowork.node'

jar {
    baseName = 'web'
    version = '1.0-SNAPSHOT'
}

sourceCompatibility = 1.8

dependencies {
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-configuration-processor')

    runtime('org.springframework.boot:spring-boot-devtools')

    testCompile('org.springframework.boot:spring-boot-starter-test')
}

compileJava.dependsOn(processResources)

task installNpm(type: NpmTask){
    workingDir = file("${project.projectDir}/src/main/client")
    args = ['install']
}

task jsBuild(type: NpmTask) {
    workingDir = file("${project.projectDir}/src/main/client")
    args = ['run', 'build']
}

task copyBuildToStatic {
    doLast {
        copy {
            from "${project.projectDir}/src/main/client/build/"
            into "${project.projectDir}/src/main/resources/static/"
        }

    }
}

project.tasks.processResources.dependsOn('installNpm')
project.tasks.processResources.dependsOn('jsBuild')
project.tasks.processResources.dependsOn('copyBuildToStatic')

idea {
    module {
        iml {
            withXml {
                // Get root of module as groovy.util.Node.
                def moduleRoot = it.asNode()

                // Find if component with name 'FacetManager'
                // is already set.
                def facetManager = moduleRoot.component.find { component -> component.'@name' == 'FacetManager' }
                if (!facetManager) {
                    // Create new component with name 'FacetManager'
                    facetManager = moduleRoot.appendNode('component', [name: 'FacetManager'])
                }

                // Find Spring facet it might already be there.
                def springFacet = facetManager.facet.find { facet -> facet.'@type' == 'Spring' && facet.'@name' == 'Spring' }
                if (!springFacet) {
                    // If not set create new facet node with name 'Spring'
                    // and type 'Spring' and apply a default configuration.
                    springFacet = facetManager.appendNode('facet', [type: 'Spring', name: 'Spring'])
                    springFacet.appendNode('configuration')
                }
            }
        }
    }
}
